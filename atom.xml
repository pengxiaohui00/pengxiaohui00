<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小灰</title>
  
  <subtitle>求学若饥，虚心若愚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengxiaohui00.github.io/"/>
  <updated>2018-09-15T12:21:42.369Z</updated>
  <id>https://pengxiaohui00.github.io/</id>
  
  <author>
    <name>xiaohui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉树遍历</title>
    <link href="https://pengxiaohui00.github.io/2018/06/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>https://pengxiaohui00.github.io/2018/06/05/二叉树遍历/</id>
    <published>2018-06-05T07:40:36.000Z</published>
    <updated>2018-09-15T12:21:42.369Z</updated>
    
    <content type="html"><![CDATA[<p>#了解：js可通过数组内置方法push与shift实现队列；通过push与pop实现栈；</p><p>#构造二叉树<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#生成一个二叉树列子；<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var tree = &#123;</span><br><span class="line"><span class="symbol">  value:</span> <span class="number">10</span>,</span><br><span class="line"><span class="symbol">  left:</span> &#123;</span><br><span class="line"><span class="symbol">    value:</span> <span class="number">2</span>,</span><br><span class="line"><span class="symbol">    left:</span> &#123;</span><br><span class="line"><span class="symbol">      value:</span> <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="symbol">  right:</span> &#123;</span><br><span class="line"><span class="symbol">    value:</span> <span class="number">11</span>,</span><br><span class="line"><span class="symbol">    left:</span> &#123;</span><br><span class="line"><span class="symbol">      value:</span> <span class="number">9</span>,</span><br><span class="line"><span class="symbol">      left:</span> &#123;</span><br><span class="line"><span class="symbol">        value:</span> <span class="number">5</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="symbol">      right:</span> &#123;</span><br><span class="line"><span class="symbol">        value:</span> <span class="number">12</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="symbol">    right:</span> &#123;</span><br><span class="line"><span class="symbol">      value:</span> <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#广度优先遍历(队列)</p><ul><li>从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止<br><img src="https://upload-images.jianshu.io/upload_images/10372596-d1c1e4968f0367ed.gif?imageMogr2/auto-orient/strip" alt="Animated_BFS.gif"></li></ul><p>入队根节点、取出，入队左节点、队右节点；取出左节点，取出右节点；<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  let <span class="attr">leverOrder=</span>function(<span class="keyword">node</span><span class="title">)&#123;</span></span><br><span class="line"><span class="title">        let</span> <span class="attr">que=</span>[];</span><br><span class="line">        que.push(<span class="keyword">node</span><span class="title">)</span></span><br><span class="line"><span class="title">        while</span>(que.length!==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">node</span> <span class="title">=que</span>.shift()</span><br><span class="line">            console.log(<span class="keyword">node</span>.<span class="title">value</span>)</span><br><span class="line">            if(<span class="keyword">node</span>.<span class="title">left</span>) que.push(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">            if(<span class="keyword">node</span>.<span class="title">right</span>) que.push(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">levelOrder(tree);// <span class="number">10</span> <span class="number">2</span> <span class="number">11</span> <span class="number">4</span> <span class="number">9</span> <span class="number">14</span> <span class="number">5</span> <span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>#深度优先遍历（栈）</p><ul><li>沿着树的深度遍历树的节点，尽可能深的搜索树的分支。</li><li>当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。</li><li>这一过程一直进行到已发现从源节点可达的所有节点为止。</li><li>如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止<br>#O代表访问根节点：L代表访问左节点：R代表访问右节点；<br>#先序遍历：OLR（递归）</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var preOrder = function (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">  if</span> (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">    console</span>.log(<span class="keyword">node</span>.<span class="title">value</span>);</span><br><span class="line">    preOrder(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">    preOrder(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">preOrder(tree);//<span class="number">10</span> <span class="number">2</span> <span class="number">4</span> <span class="number">11</span> <span class="number">9</span> <span class="number">5</span> <span class="number">12</span> <span class="number">14</span></span><br></pre></td></tr></table></figure><p>#栈<br>先推入根节点入栈、取出，再推右节点、左节点入栈，取出；<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let <span class="attr">preOrder=</span> function (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">    let</span> stack =[];</span><br><span class="line">    stack.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">    while</span>(stack.length!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">node</span> <span class="title">=stack</span>.pop();</span><br><span class="line">        console.log(<span class="keyword">node</span>.<span class="title">value</span>);</span><br><span class="line">        if(<span class="keyword">node</span>.<span class="title">right</span>) stack.push(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">        if(<span class="keyword">node</span>.<span class="title">left</span>)  stack.push(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    preOrder(tree)//<span class="number">10</span> <span class="number">2</span> <span class="number">4</span> <span class="number">11</span> <span class="number">9</span> <span class="number">5</span> <span class="number">12</span> <span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>#中序遍历：LOR（）</p><p>##递归<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var inOrder = function (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">  if</span> (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">    inOrder</span>(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">    console.log(<span class="keyword">node</span>.<span class="title">value</span>);</span><br><span class="line">    inOrder(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">inOrder(tree);// <span class="number">4</span> <span class="number">2</span> <span class="number">10</span> <span class="number">5</span>  <span class="number">9</span>  <span class="number">12</span> <span class="number">11</span> <span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>##栈<br>先把根节点、左节点推入栈，然后取出左节点，再推右节点入栈，取出根节点与右节点；<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> let <span class="attr">inOrder=</span>function (<span class="keyword">node</span><span class="title">)&#123;</span></span><br><span class="line"><span class="title">     stack</span>=[];</span><br><span class="line">     while(stack.length!==<span class="number">0</span>||<span class="keyword">node</span> <span class="title">)&#123;</span></span><br><span class="line"><span class="title">         if</span>(<span class="keyword">node</span><span class="title">)&#123;</span></span><br><span class="line"><span class="title">             stack</span>.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">             node</span>=<span class="keyword">node</span>.<span class="title">left</span> ;</span><br><span class="line">         &#125;else&#123;</span><br><span class="line">             <span class="keyword">node</span> <span class="title">= stack</span>.pop();</span><br><span class="line">             console.log(<span class="keyword">node</span>.<span class="title">value</span>);</span><br><span class="line">             <span class="keyword">node</span><span class="title">= node</span>.right;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">inOrder(tree)// <span class="number">4</span> <span class="number">2</span> <span class="number">10</span> <span class="number">5</span>  <span class="number">9</span>  <span class="number">12</span> <span class="number">11</span> <span class="number">14</span></span><br></pre></td></tr></table></figure></p><p>#后序遍历：LRO</p><p>##递归<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var postOrder = function (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">  if</span> (<span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">    postOrder</span>(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">    postOrder(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">    console.log(<span class="keyword">node</span>.<span class="title">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">postOrder(tree);// <span class="number">4</span>  <span class="number">2</span> <span class="number">5</span>  <span class="number">12</span> <span class="number">9</span>  <span class="number">14</span> <span class="number">11</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>##栈<br>定义2个栈是s1,s2：s1暂存数据：先把根节点和左树推入栈，然后取出左树，再推入右树，取出，最后取根节点。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let <span class="attr">postOrder=</span> function (<span class="keyword">node</span><span class="title">)&#123;</span></span><br><span class="line"><span class="title">    let</span> <span class="attr">s1=</span>[];</span><br><span class="line">    let <span class="attr">s2=</span>[];</span><br><span class="line">    s1.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">    while</span>(s1.length!==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">node</span> <span class="title">= s1</span>.pop();</span><br><span class="line">        s2.push(<span class="keyword">node</span><span class="title">);</span></span><br><span class="line"><span class="title">        if</span> (<span class="keyword">node</span>.<span class="title">left</span>) s1.push(<span class="keyword">node</span>.<span class="title">left</span>);</span><br><span class="line">        if (<span class="keyword">node</span>.<span class="title">right</span>) s1.push(<span class="keyword">node</span>.<span class="title">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        while(s2.length!==<span class="number">0</span>)&#123;</span><br><span class="line">            console.log(s2.pop().value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> postOrder(tree)//<span class="number">4</span>  <span class="number">2</span> <span class="number">5</span>  <span class="number">12</span> <span class="number">9</span>  <span class="number">14</span> <span class="number">11</span> <span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>#用递归能做的,用非递归都可以做.</p><ul><li><p>因为递归其实就是利用函数栈来保存信息,如果用自己的数据结构来代替函数栈,自然可以实现相同的功能.</p></li><li><p>如果需要用队列实现深度遍历，我的思路是用两个队列模拟一个栈。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#了解：js可通过数组内置方法push与shift实现队列；通过push与pop实现栈；&lt;/p&gt;
&lt;p&gt;#构造二叉树&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://pengxiaohui00.github.io/2018/05/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://pengxiaohui00.github.io/2018/05/05/排序算法/</id>
    <published>2018-05-05T07:40:36.000Z</published>
    <updated>2018-09-15T12:21:18.710Z</updated>
    
    <content type="html"><![CDATA[<p>#字典排序<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let dict = &#123;<span class="string">f:</span> <span class="number">3</span>, <span class="string">b:</span><span class="number">1</span>, <span class="string">c:</span><span class="number">2</span>,<span class="string">a:</span>&#123;<span class="string">c:</span><span class="number">1</span>,<span class="string">b:</span><span class="number">3</span>,<span class="string">a:</span><span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span> (let key of Object.keys(dict).sort()) &#123;</span><br><span class="line">  console.log(key, dict[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> var bubbleSort = function (arr) &#123;</span><br><span class="line">    var length = arr.length;</span><br><span class="line">    for(var i=<span class="number">0</span>;i&lt;length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        for (var j= <span class="number">0</span>;j&lt;length<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">            if(arr[j] &gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                var aux =arr[j];</span><br><span class="line">                arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]= aux;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     return arr;</span><br><span class="line">&#125;;</span><br><span class="line">var arr1=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="string">"a"</span>,<span class="string">"h"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>];</span><br><span class="line">console.log(arr1);</span><br><span class="line">console.log(bubbleSort(arr1));</span><br></pre></td></tr></table></figure><p> #选择排序<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">var</span> selectionSort = function (arr) &#123;</span><br><span class="line">        <span class="built_in">var</span> <span class="built_in">length</span> = arr.<span class="built_in">length</span>,indexMin;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            indexMin =i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">var</span> j=i;j&lt;<span class="built_in">length</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[indexMin]&gt;arr[j])&#123;</span><br><span class="line">                    indexMin = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i !==indexMin)&#123;</span><br><span class="line">                <span class="built_in">var</span> aux =arr[i];</span><br><span class="line">                arr[i] = arr[indexMin];</span><br><span class="line">                arr[indexMin]= aux;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">var</span> arr2=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="string">"a"</span>,<span class="string">"h"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>];</span><br><span class="line">  console.<span class="built_in">log</span>(selectionSort(arr2));</span><br></pre></td></tr></table></figure></p><p>#插入排序<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    var insertionSort = function(arr)&#123;</span><br><span class="line">        var len = arr.length;</span><br><span class="line">        var j,temp;</span><br><span class="line">        for( var i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            j=i;</span><br><span class="line">            temp =arr[i];</span><br><span class="line">            while(j&gt; <span class="number">0</span> &amp;&amp; arr[j<span class="number">-1</span>]&gt;temp)&#123;</span><br><span class="line">                arr[j]=arr[j<span class="number">-1</span>];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">var arr3=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="string">"a"</span>,<span class="string">"h"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>];</span><br><span class="line">console.log(insertionSort(arr3));</span><br></pre></td></tr></table></figure></p><p>#归并排序<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> merge(<span class="built_in">left</span>, <span class="built_in">right</span>) &#123;</span><br><span class="line">    var tmp = [];</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">left</span>.length &amp;&amp; <span class="built_in">right</span>.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">left</span>[<span class="number">0</span>] &lt; <span class="built_in">right</span>[<span class="number">0</span>])</span><br><span class="line">            tmp.push(<span class="built_in">left</span>.shift());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tmp.push(<span class="built_in">right</span>.shift());</span><br><span class="line">    &#125;</span><br><span class="line">    return tmp.concat(<span class="built_in">left</span>, <span class="built_in">right</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> mergeSort(a) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.length === <span class="number">1</span>)</span><br><span class="line">        return a;</span><br><span class="line">    var <span class="built_in">mid</span> = Math.floor(a.length / <span class="number">2</span>)</span><br><span class="line">            , <span class="built_in">left</span> = a.slice(<span class="number">0</span>, <span class="built_in">mid</span>)</span><br><span class="line">            , <span class="built_in">right</span> = a.slice(<span class="built_in">mid</span>);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">left</span>);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">right</span>);</span><br><span class="line">    return merge(mergeSort(<span class="built_in">left</span>), mergeSort(<span class="built_in">right</span>));</span><br><span class="line">&#125;</span><br><span class="line">var arr4=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="string">"a"</span>,<span class="string">"h"</span>,<span class="string">"c"</span>,<span class="string">"b"</span>];</span><br><span class="line">console.<span class="built_in">log</span>(mergeSort(arr4));</span><br></pre></td></tr></table></figure></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(a.length / <span class="number">2</span>)</span><br><span class="line">                , midItem = a.splice(mid, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">                , left = []</span><br><span class="line">                , right = [];</span><br><span class="line">        a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (item &lt;= midItem)</span><br><span class="line">                left.push(item);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right.push(item);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> _left = quickSort(left),</span><br><span class="line">            _right = quickSort(right);</span><br><span class="line">        <span class="built_in">console</span>.log(_left)</span><br><span class="line">        <span class="built_in">console</span>.log(_right)</span><br><span class="line">        <span class="keyword">return</span> _left.concat(midItem, _right);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> arr5 = [<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="string">"a"</span>,<span class="number">11</span>,<span class="string">"h"</span>,<span class="number">3</span>,<span class="string">"c"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr5))</span><br></pre></td></tr></table></figure><h1 id="数组内置方法"><a href="#数组内置方法" class="headerlink" title="数组内置方法"></a>数组内置方法</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(arr5.<span class="built_in">sort</span>(<span class="function"><span class="keyword">function</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#字典排序&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>继承</title>
    <link href="https://pengxiaohui00.github.io/2018/05/01/%E7%BB%A7%E6%89%BF/"/>
    <id>https://pengxiaohui00.github.io/2018/05/01/继承/</id>
    <published>2018-05-01T07:10:51.000Z</published>
    <updated>2018-09-15T09:40:19.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>JavaScript并不提供原生的继承机制，我们自己实现的方式很多，介绍一种最为通用的</p><p>先定义两个类<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Male.prototype.printAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h2><p>对象属性的获取是通过构造函数的执行，我们在一个类中执行另外一个类的构造函数，就可以把属性赋值到自己内部，但是我们需要把环境改到自己的作用域内，这就要借助我们讲过的函数call了</p><p>改造一些Male<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, sex);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Male.prototype.printAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>实例化看看结果<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="type">Male</span>(<span class="string">'Byron'</span>, <span class="string">'male'</span>, <span class="number">26</span>);</span><br><span class="line">console.log(m.sex); <span class="comment">// "male"</span></span><br></pre></td></tr></table></figure></p><h2 id="方法获取"><a href="#方法获取" class="headerlink" title="方法获取"></a>方法获取</h2><p>我们知道类的方法都定义在了prototype里面，所以只要我们把子类的prototype改为父类的prototype的备份就好了<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Male</span>.proto<span class="keyword">type</span> = <span class="type">Object</span>.create(<span class="type">Person</span>.prototype);</span><br></pre></td></tr></table></figure></p><ul><li><p>这里我们通过Object.createclone了一个新的prototype而不是直接把Person.prtotype直接赋值，因为引用关系，这样会导致后续修改子类的prototype也修改了父类的prototype，因为修改的是一个值</p></li><li><p>另外Object.create是ES5方法，之前版本通过遍历属性也可以实现浅拷贝</p></li><li><p>这样做需要注意一点就是对子类添加方法，必须在修改其prototype之后，如果在之前会被覆盖掉</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Male</span>.proto<span class="keyword">type</span>.printAge = function()&#123;</span><br><span class="line">    console.log(this.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Male</span>.proto<span class="keyword">type</span> = <span class="type">Object</span>.create(<span class="type">Person</span>.prototype);</span><br></pre></td></tr></table></figure></li></ul><p>这样的话，printAge方法在赋值后就没了，因此得这么写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, sex);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Male.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line"></span><br><span class="line">Male.prototype.printAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样写貌似没问题了，但是有个问题就是我们知道prototype对象有一个属性constructor指向其类型，因为我们复制的父元素的prototype，这时候constructor属性指向是不对的，导致我们判断类型出错<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Male.prototype.<span class="keyword">constructor</span>; <span class="comment">//Person</span></span><br></pre></td></tr></table></figure></p><p>因此我们需要再重新指定一下constructor属性到自己的类型</p><h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><p>我们可以通过一个函数实现刚才说的内容<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">function</span> inherit(superType, subType)&#123;</span><br><span class="line">    var _proto<span class="keyword">type</span>  = <span class="type">Object</span>.create(superType.prototype);</span><br><span class="line">    _proto<span class="keyword">type</span>.constructor = subType;</span><br><span class="line">    subType.proto<span class="keyword">type</span> = _prototype;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, sex);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">inherit(Person, Male);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在继承函数之后写自己的方法，否则会被覆盖</span></span><br><span class="line">Male.prototype.printAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Male(<span class="string">'Byron'</span>, <span class="string">'m'</span>, <span class="number">26</span>);</span><br><span class="line">m.printName();</span><br></pre></td></tr></table></figure><h2 id="es5之前方法"><a href="#es5之前方法" class="headerlink" title="es5之前方法"></a>es5之前方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.printName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Male</span>(<span class="params">name, sex, age</span>)</span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, sex);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Male.prototype =Person  <span class="keyword">new</span>;（）</span><br><span class="line">Male.prototype.constructor = Male;</span><br><span class="line"><span class="comment">// 在继承函数之后写自己的方法，否则会被覆盖</span></span><br><span class="line">Male.prototype.printAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> Male(<span class="string">'Byron'</span>, <span class="string">'m'</span>, <span class="number">26</span>);</span><br><span class="line">m.printName();</span><br></pre></td></tr></table></figure><h2 id="es6-类-extends-关键字"><a href="#es6-类-extends-关键字" class="headerlink" title="es6 类 :extends 关键字"></a>es6 类 :extends 关键字</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        <span class="keyword">this</span>.body = '肉体'</span><br><span class="line">    &#125;,</span><br><span class="line">    move()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;,</span><br><span class="line">    useTools()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> frank = <span class="keyword">new</span> <span class="type">Human</span>()</span><br></pre></td></tr></table></figure><p>这样我们就在JavaScript中实现了继承</p><h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p>hasOwnPerperty是Object.prototype的一个方法，可以判断一个对象是否包含自定义属性而不是原型链上的属性，hasOwnProperty是JavaScript中唯一一个处理属性但是不查找原型链的函数</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m.hasOwnProperty(<span class="string">'name'</span>); <span class="regexp">//</span> <span class="keyword">true</span></span><br><span class="line">m.hasOwnProperty(<span class="string">'printName'</span>); <span class="regexp">//</span> <span class="keyword">false</span></span><br><span class="line">Male.prototype.hasOwnProperty(<span class="string">'printAge'</span>); <span class="regexp">//</span> <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>范例 1.实现面向对象的方式实现 Tab 组件<br><a href="https://pengxiaohui00.github.io/module/tab%E5%88%87%E6%8D%A2%E7%BB%84%E4%BB%B6/index.html">代码地址</a></p><p>2.扩展 String 的功能增加 reverse 方法，实现字符串倒序<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>.prototype.<span class="built_in">reverse</span> = function()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">split</span>(<span class="string">""</span>).<span class="built_in">reverse</span>().<span class="built_in">join</span>(<span class="string">""</span>)</span><br><span class="line">       console.<span class="built_in">log</span>(<span class="keyword">this</span>)</span><br><span class="line">   &#125;;</span><br><span class="line">   var <span class="built_in">str</span> = <span class="string">'hello jirengu'</span></span><br><span class="line">   var str2 = <span class="built_in">str</span>.<span class="built_in">reverse</span>();</span><br><span class="line">   console.<span class="built_in">log</span>(str2) <span class="comment">//  'ugnerij olleh'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;p&gt;JavaScript并不提供原生的继承机制，我们自己实现的方式很多，介绍一种最为通用的&lt;/p&gt;
&lt;p&gt;先定义两个类&lt;br&gt;&lt;figure c
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>理解作用链</title>
    <link href="https://pengxiaohui00.github.io/2018/04/15/%E7%90%86%E8%A7%A3%E4%BD%9C%E7%94%A8%E9%93%BE/"/>
    <id>https://pengxiaohui00.github.io/2018/04/15/理解作用链/</id>
    <published>2018-04-15T07:25:31.000Z</published>
    <updated>2018-09-15T09:40:12.409Z</updated>
    
    <content type="html"><![CDATA[<p>#理解作用链的作用</p><p>1.函数在执行的过程中，先从自己内部找变量</p><p>2.如果找不到，再从创建当前函数所在的作用域去找, 以此往上</p><p>3.注意找的是变量的当前的状态</p><h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">function fn1()&#123;</span><br><span class="line">  function fn2()&#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">  &#125;</span><br><span class="line">  function fn3()&#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">4</span></span><br><span class="line">    fn2()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">2</span></span><br><span class="line">  return fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> fn = fn1()</span><br><span class="line"><span class="function"><span class="title">fn</span><span class="params">()</span></span> <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>最后执行fn2函数，fn2找不到变量a,接着往上在找到创建当前fn2所在的作用域fn1中找到a=2;<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">function fn1()&#123;</span><br><span class="line">  function fn3()&#123;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">4</span></span><br><span class="line">    fn2()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">2</span></span><br><span class="line">  return fn3</span><br><span class="line">&#125;</span><br><span class="line">function fn2()&#123;</span><br><span class="line">  console.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> fn = fn1()</span><br><span class="line"><span class="function"><span class="title">fn</span><span class="params">()</span></span> <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>同上<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line">function fn1()&#123;</span><br><span class="line"></span><br><span class="line">  function fn3()&#123;</span><br><span class="line">    function fn2()&#123;</span><br><span class="line">      console.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    fn2()</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">2</span></span><br><span class="line">  return fn3</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> fn = fn1()</span><br><span class="line"><span class="function"><span class="title">fn</span><span class="params">()</span></span> <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>函数fn2在执行的过程中，先从自己内部找变量找不到，再从创建当前函数所在的作用域fn去找,注意此时变量声明前置，a已声明但未初始化为undefined;</p><p>#理解作用链的原理：<br>前提：了解全局作用域，函数作用域，变量和函数的声明前置等基础；</p><p>##函数的生命周期</p><p>###函数的的生命周期分为创建和执行两个阶段。</p><ul><li>在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或当前函数的上一级函数的局部作用域中。</li></ul><ul><li><p>在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。<br>##变量对象（Variable Object）</p></li><li><p>VO对应的是函数创建阶段，JS解析引擎进行预解析时，所有的变量和函数的声明，统称为Variable Object。</p></li><li><p>该变量与执行上下文相关，知道自己的数据存储在哪里，并且知道如何访问。</p></li></ul><p>##VO是一个与执行上下文相关的特殊对象，它存储着在上下文中声明的以下内容：</p><ul><li>变量 (var, 变量声明);</li><li>函数声明 (FunctionDeclaration, 缩写为FD);</li><li>函数的形参<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(a,b)</span>&#123;</span></span><br><span class="line">var <span class="built_in">sum</span> = a + b;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span>&#123;</span></span><br><span class="line">alert(<span class="built_in">sum</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sum,say,a,b 组合的对象就是VO</span></span><br></pre></td></tr></table></figure></li></ul><p>##AO（活动对象）</p><ul><li>对应的是函数执行阶段，当函数被调用执行时，会建立一个执行上下文，该执行上下文包含了函数所需的所有变量，该变量共同组成了一个新的对象就是Activetion Object。</li></ul><h2 id="该对象包含了："><a href="#该对象包含了：" class="headerlink" title="该对象包含了："></a>该对象包含了：</h2><ul><li>函数的所有局部变量</li><li>函数的所有命名参数</li><li>函数的参数集合</li><li>函数的this指向<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unction add(a,b)&#123;</span><br><span class="line">var <span class="built_in">sum</span> = a + b;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span>&#123;</span></span><br><span class="line">alert(<span class="built_in">sum</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//  我用JS对象来表示AO</span></span><br><span class="line"><span class="comment">//  AO = &#123;</span></span><br><span class="line"><span class="comment">//    this : window,</span></span><br><span class="line"><span class="comment">//    arguments : [4,5],</span></span><br><span class="line"><span class="comment">//    a : 4,</span></span><br><span class="line"><span class="comment">//    b : 5,</span></span><br><span class="line"><span class="comment">//    say : ,</span></span><br><span class="line"><span class="comment">//    sum : undefined</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h1><ul><li><p>1.当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）来保证对执行环境有权访问的变量和函数的有序访问。</p></li><li><p>2.作用域第一个对象始终是当前执行代码所在环境的变量对象（VO），即在当前执行函数的作用域中寻找变量。</p></li><li><p>3.在函数运行过程中标识符的解析是沿着作用域链一级一级搜索的过程，从第一个对象开始，逐级向后回溯，直到找到同名标识符为止，找到后不再继续遍历，找不到就报错。</p></li></ul><p>举例：<br><img src="https://upload-images.jianshu.io/upload_images/10372596-0d65480d510f3ac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p><h3 id="1-预处理后，进入全局上下文"><a href="#1-预处理后，进入全局上下文" class="headerlink" title="1 预处理后，进入全局上下文"></a>1 预处理后，进入全局上下文</h3><p><img src="https://upload-images.jianshu.io/upload_images/10372596-1e49e56dcb3ec9ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.png"></p><h3 id="2-执行bar-函数"><a href="#2-执行bar-函数" class="headerlink" title="2 执行bar()函数"></a>2 执行bar()函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/10372596-36d8ce5dff28ea37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8.png"></p><h3 id="3-查找变量"><a href="#3-查找变量" class="headerlink" title="3 查找变量"></a>3 查找变量</h3><p><img src="https://upload-images.jianshu.io/upload_images/10372596-af487d5395844fd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9.png"></p><h3 id="4-执行foo-函数"><a href="#4-执行foo-函数" class="headerlink" title="4 执行foo()函数"></a>4 执行foo()函数</h3><p><img src="https://upload-images.jianshu.io/upload_images/10372596-f9bc6a5eb42b4feb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#理解作用链的作用&lt;/p&gt;
&lt;p&gt;1.函数在执行的过程中，先从自己内部找变量&lt;/p&gt;
&lt;p&gt;2.如果找不到，再从创建当前函数所在的作用域去找, 以此往上&lt;/p&gt;
&lt;p&gt;3.注意找的是变量的当前的状态&lt;/p&gt;
&lt;h2 id=&quot;范例&quot;&gt;&lt;a href=&quot;#范例&quot; class=&quot;
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>原型与原型链</title>
    <link href="https://pengxiaohui00.github.io/2018/04/02/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://pengxiaohui00.github.io/2018/04/02/原型与原型链/</id>
    <published>2018-04-02T07:25:31.000Z</published>
    <updated>2018-09-15T09:40:04.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="prototype（原型）"><a href="#prototype（原型）" class="headerlink" title="prototype（原型）"></a>prototype（原型）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">nick, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.nick = nick;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.nick);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.sayName();</span><br></pre></td></tr></table></figure><ul><li><p>我们通过函数定义了类Person，类（函数）自动获得属性prototype</p></li><li><p>每个类的实例都会有一个内部属性<strong>proto</strong>，指向类的prototype属性</p></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/10372596-f3965b5136af58ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>通过图示我们可以看出一些端倪，实例可以通过<code>__prop__</code>访问到其类型的prototype属性，这就意味</p><p>着类的prototype对象可以作为一个公共容器，供所有实例访问。</p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>我们刚才的问题可以通过这个手段解决</p><ul><li><p>所有实例都会通过原型链引用到类型的prototype</p></li><li><p>prototype相当于特定类型所有实例都可以访问到的一个公共容器</p></li><li><p>重复的东西移动到公共容器里放一份就可以了</p></li></ul><p>范例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span> (<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">People.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' is walking'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> People(<span class="string">'饥人谷'</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> People(<span class="string">'前端'</span>);</span><br></pre></td></tr></table></figure><p>这时候我们对应的关系是这样的</p><p><img src="https://upload-images.jianshu.io/upload_images/10372596-470d3224973edc61.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="006JM2pKgy1fqn2a9d2mfj30u0140ac1.jpg"></p><h2 id="深入了解原型链"><a href="#深入了解原型链" class="headerlink" title="深入了解原型链"></a>深入了解原型链</h2><p><img src="https://upload-images.jianshu.io/upload_images/10372596-68fa9921bbcbd984.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;prototype（原型）&quot;&gt;&lt;a href=&quot;#prototype（原型）&quot; class=&quot;headerlink&quot; title=&quot;prototype（原型）&quot;&gt;&lt;/a&gt;prototype（原型）&lt;/h1&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="https://pengxiaohui00.github.io/2018/03/25/web%E5%AE%89%E5%85%A8/"/>
    <id>https://pengxiaohui00.github.io/2018/03/25/web安全/</id>
    <published>2018-03-25T07:40:36.000Z</published>
    <updated>2018-09-15T12:28:30.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS-攻击"><a href="#XSS-攻击" class="headerlink" title="XSS 攻击"></a>XSS 攻击</h1><p>XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。其实在web前端方面，可以简单的理解为一种javascript代码注入。</p><h2 id="使用eval-有什么问题？"><a href="#使用eval-有什么问题？" class="headerlink" title="使用eval 有什么问题？"></a>使用eval 有什么问题？</h2><p>需要注意的地方就是eval这个函数是可以将字符串重新转换成函数的并且执行函数的。eval() 函数：可计算某个字符串,并执行其中的的 JavaScript 代码。</p><p>##如何防范 XSS 攻击？</p><ul><li><p>1.js 里不要用 eval</p></li><li><p>2.不要用 innerHTML，尽量使用innerText</p></li><li><p>3.把敏感信息都是存储在cookie中的（不要把用户机密信息放在网页中），想要阻止黑客通过js访问到cookie中的用户敏感信息。那么请使用cookie的HttpOnly属性，加上了这个属性的cookie字段，js是无法进行读写的。</p></li><li><p>4.只允许用户输入我们期望的数据。例如：年龄的textbox中，只允许用户输入数字，而数字之外的字符都过滤掉</p></li><li><p>5.对数据进行Html Encode 处理。一般会转（&amp;、&lt;、&gt;、”、’、/）这6个字符；</p><h2 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h2><p>CSRF（Cross-site request forgery，中文为跨站请求伪造）是一种利用网站可信用户的权限去执行未授权的命令的一种恶意攻击。通过伪装可信用户的请求来利用信任该用户的网站</p><h2 id="如何防范？"><a href="#如何防范？" class="headerlink" title="如何防范？"></a>如何防范？</h2><p>1.验证 HTTP Referer 字段<br>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。</p></li></ul><p>2.在请求中添加token并验证<br>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。<br>对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url?csrftoken=tokenvalue。不行，不安全，可能会被攻击者看到。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。不行，不安全，可能会被攻击者看到。</a><br>而对于 POST 请求来说，要在 form 的最后加上<br><code>&lt;input type=&quot;hidden&quot; name=&quot;csrftoken&quot; value=&quot;tokenvalue&quot;/&gt;</code><br>这样就把token以参数的形式加入请求了。</p><p>3.在HTTP 头中自定义属性并验证<br>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p><p>4.验证码。通常情况下，验证码能够很好的遏制CSRF攻击，但是很多情况下，出于用户体验考虑，验证码只能作为一种辅助手段，而不是最主要的解决方案。</p><h2 id="Https-是如何保证安全的？"><a href="#Https-是如何保证安全的？" class="headerlink" title="Https 是如何保证安全的？"></a>Https 是如何保证安全的？</h2><ul><li><p>（1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。</p></li><li><p>（2） 非对称加密使用一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。</p></li><li><p>（3） 解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。</p></li><li><p>(4)系统中会预先安装好证书，进行https通讯前会核对公钥是否在传输中被篡改。不信任一些不可靠证书。</p></li></ul><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程:"></a>具体流程:</h2><ul><li><p>服务器 用RSA生成公钥和私钥</p></li><li><p>把公钥放在证书里发送给客户端，私钥自己保存</p></li><li><p>客户端首先向一个权威的服务器检查证书的合法性</p></li><li><p>如果证书合法，客户端产生一段随机数，这个- 随机数就作为通信的密钥，我们称之为对称密钥</p></li><li><p>用公钥加密这段随机数，然后发送到服务器，服务器用密钥解密获取对称密钥，然后，双方就已对称密钥进行加密解密通信了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS-攻击&quot;&gt;&lt;a href=&quot;#XSS-攻击&quot; class=&quot;headerlink&quot; title=&quot;XSS 攻击&quot;&gt;&lt;/a&gt;XSS 攻击&lt;/h1&gt;&lt;p&gt;XSS攻击全称跨站脚本攻击，是为不和层叠样式表(Cascading Style Sheets, CSS)的缩
      
    
    </summary>
    
      <category term="http" scheme="https://pengxiaohui00.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://pengxiaohui00.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>常用css选择器</title>
    <link href="https://pengxiaohui00.github.io/2018/03/25/%E5%B8%B8%E7%94%A8css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://pengxiaohui00.github.io/2018/03/25/常用css选择器/</id>
    <published>2018-03-25T07:40:36.000Z</published>
    <updated>2018-09-15T12:29:42.196Z</updated>
    
    <content type="html"><![CDATA[<p>#CSS常用选择器：</p><p>##一、简单选择器<br> *，通用元素选择器，匹配任何元素<br>E，标签选择器，匹配所有使用E标签的元素<br>.class，class选择器，匹配特定class属性的元素<br> /#ID，id选择器，匹配特定id属性的元素</p><p>##二、属性选择器<br>[atrr]    ，选择包含 attr 属性的所有元素，不论 attr 的值为何<br>[attr=val]    ，仅选择 attr 属性被赋值为 val 的所有元素</p><p>##三、组合选择器<br>A, B    ，多元素选择器：选中匹配 A 或B 元素<br>A  B    ，后代选择器：选中匹配 A 元素的后代B 元素(A B之间空格分开)<br>A &gt; B，子元素选择器：选中匹配 A父元素内的直接B子元素<br>A + B，直接相邻选择器：选中匹配 B 元素之后的相邻的同级的A元素<br>A ~ B，普通相邻选择器：选中B元素之后的同级 A 元素（无论直接相邻与否）<br>.a.b,匹配class=’’a  b”元素<br>A.b,匹配class=”a”的元素</p><p>##四、伪类选择器</p><p>###伪类与伪元素的区别:<br>css引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分，比如，一句话中的第一个字母，或者是列表中的第一个元素。下面分别对伪类和伪元素进行解释：</p><p>伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过:hover来描述这个元素的状态。虽然它和普通的css类相似，可以为已有的元素添加样式，但是它只有处于dom树无法描述的状态下才能为元素添加样式，所以将其称为伪类。</p><p>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><p>###1、动态伪类选择器：<br>a:link    ，匹配所有未被点击的链接<br>a:visited    ，匹配所有已被点击的链接<br>a:hover    ，匹配鼠标悬停其上的a元素<br>a:active    ，匹配鼠标已经其上按下、还没有释放的a元素<br>E :focus    ,选择获取焦点的输入字段</p><p>###2：UI元素伪类选择器：<br>E:checked ： {attribute}，匹配所有用户界面（form表单）中处于选中状态的元素E<br>E:enabled ： {attribute}，匹配所有用户界面（form表单）中处于可用状态的E元素<br>E:disabled ： {attribute}，匹配所有用户界面（form表单）中处于不可用状态的E元素<br>E::selection ： {attribute}，匹配E元素中被用户选中或处于高亮状态的部分</p><p>###3：结构伪类选择器：<br>:root()选择器，从字面上我们就可以很清楚的理解是根选择器，他的意思就是匹配元素E所在文档的根元素。在HTML文档中，根元素始终是<html>。“:root”选择器等同于<html>元素<br>:not()选择器称为否定选择器，和jQuery中的:not选择器一模一样，可以选择除某个元素之外的所有元素。<br>:empty()选择器表示的就是空。用来选择没有任何内容的元素，这里没有内容指的是一点内容都没有，哪怕是一个空格。<br>:target()选择器来对页面某个target元素(该元素的id被当做页面中的超链接来使用)指定样式，该样式只在用户点击了页面中的超链接，并且跳转到target元素后起作用<br>:first-child()选择器表示的是选择父元素的第一个子元素的元素E。简单点理解就是选择元素中的第一个子元素<br> : last-child匹配元素的最后一个子元素。<br>:nth-child根据元素的位置匹配一个或者多个元素<br>（它接受一个an+b形式的参数，an+b匹配到的元素示例如下：<br>1n+0，或n，匹配每一个子元素。<br>2n+0，或2n，匹配位置为2、4、6、8…的子元素，该表达式与关键字even等价。<br>2n+1匹配位置为1、3、5、7…的子元素、该表达式与关键字odd等价。<br>3n+4匹配位置为4、7、10、13…的子元素。）<br>:nth-last-child()从某父元素的最后一个子元素开始计算，来选择特定的元素<br>：first-of-type匹配属于其父元素的首个特定类型的子元素的元素。<br>:nth-of-type与nth-child相似，不同之处在于它是只匹配特定类型的元素。</html></html></p><p>##五、伪元素选择器</p><p>##伪元素概念：<br>伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。</p><p>E::before在被选元素前插入内容。需要使用content属性来指定要插入的内容。被插入的内容实际上不在文档树中。<br>E::after在被元素后插入内容，其用法和特性与:before相似<br>E::first-letter匹配元素中文本的首字母。被修饰的首字母不在文档树中。<br>E:first-line匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。<br>E::selection匹配用户被用户选中或者处于高亮状态的部分。<br>E::placeholder匹配占位符的文本，只有元素设置了placeholder属性时，该伪元素才能生效</p><p>##计算选择器的优先级</p><p>###简单情况：</p><p>#####优先级从高到低分别是：<br>在属性后面使用 !important 会覆盖页面内任何位置定义的元素样式<br>作为style属性写在元素标签上的内联样式<br>Id选择器<br>类选择器<br>伪类选择器<br>属性选择器<br>标签选择器<br>通配符选择器<br>浏览器自定义</p><p>###复杂场景：<br>如有多种选择器组合使用，同时选中某元素，直接计算a,b,c,d的值<br>行内样式 <div style="xxx"></div> ==&gt; a<br>ID 选择器 ==&gt; b<br>类，属性选择器和伪类选择器 ==&gt; c<br>标签选择器、伪元素 ==&gt; d<br>abcd优先级依次降低</p><p>##范例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.box</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="undefined">  color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:first-of-type</span> &#123;</span></span><br><span class="line"><span class="undefined">  background: blue;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="undefined">  font-size: 30px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> <span class="selector-pseudo">:first-of-type</span> &#123;</span></span><br><span class="line"><span class="undefined">  font-weight: bold;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div.box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>p.box<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>div.box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>div.item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>p.item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>.box:first-child {<br>color: red;<br>}<br>选择其父元素的第一个class=”.box”的子元素为红色，选中的是 <div class="box">div.box</div>并让其字体颜色为红色</p></li><li><p>.box:first-of-type {<br>background: blue;<br>}<br>选择其父元素中指定的某种类型且class=”.box”的子元素的背景颜色为蓝色，选中的是 <div class="box">div.box</div>，</p><p class="box">p.box</p>，并让其背景颜色为蓝色<p></p></li><li>.box :first-child {<br>font-size: 30px;<br>}<br>选择class=”box”父元素内的第一个子元素的字体为30px,选中的是 <div class="item">div.item</div>，并让其字体大小为30px;</li><li>.box :first-of-type {<br>font-weight: bold;<br>}<br>选择claa=”box”父元素内的第一个某种类型的子元素的字体加粗，选中的是 <div class="item">div.item</div><br><p class="item">p.item</p>，并让其字体加粗</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#CSS常用选择器：&lt;/p&gt;
&lt;p&gt;##一、简单选择器&lt;br&gt; *，通用元素选择器，匹配任何元素&lt;br&gt;E，标签选择器，匹配所有使用E标签的元素&lt;br&gt;.class，class选择器，匹配特定class属性的元素&lt;br&gt; /#ID，id选择器，匹配特定id属性的元素&lt;/p&gt;
      
    
    </summary>
    
      <category term="css" scheme="https://pengxiaohui00.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://pengxiaohui00.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>form表单</title>
    <link href="https://pengxiaohui00.github.io/2018/03/17/form%E8%A1%A8%E5%8D%95/"/>
    <id>https://pengxiaohui00.github.io/2018/03/17/form表单/</id>
    <published>2018-03-17T07:40:36.000Z</published>
    <updated>2018-09-15T12:26:22.912Z</updated>
    
    <content type="html"><![CDATA[<p>##post 和 get 方式提交数据有什么区别</p><p>1.最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数;</p><p>2.GET能被缓存，POST不能缓存 。</p><p>3.GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。</p><p>4.GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。</p><p>5.GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。</p><p>6 与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。<br>GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</p><p>7.GET方法请求资源。POST的语义是上传数据。</p><p>8.POST不安全，不幂等，</p><p>##在input里，name 有什么作用？</p><ul><li><p>用途1： name 属性用于对提交到服务器后的表单数据进行标识，或者在客户端通过 JavaScript 引用表单数据。只有设置了 name 属性的表单元素才能在提交表单时传递它们的值。比如input、select、textarea、和button等。我们可以在服务器端根据其Name通过Request.Params取得元素提交的值。</p></li><li><p>用途2： HTML元素Input type=’radio’分组，我们知道radio button控件在同一个分组类，check操作是mutex的，同一时间只能选中一个radio，这个分组就是根据相同的Name属性来实现的。<br>##placeholder 属性有什么作用？</p></li></ul><p>该提示会在输入字段为空时显示，并会在字段获得焦点时消失。</p><p>##label 有什么作用？如何使用？</p><ul><li><label> 标签为 input 元素定义标注（标记）。</label></li></ul><p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p><ul><li><label> 标签的 for 属性应当与相关元素的 id 属性相同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"username"</span>&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"username"</span>&gt;姓名&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input id="username" type="text" name="username"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></label></li></ul><p>###type=hidden隐藏域有什么作用?</p><p>1.隐藏域的作用是帮助表单收集和发送信息，便于后端处理数据。用户点击提交数据的时候，隐藏域的信息也被一起发送到了后端。</p><p> 2.后端接收前端传来的数据，需要确认前端的身份，是本公司的网页传来的数据，而不是其他黑客知道后端地址后传来的假数据。那么就加一个隐藏域，验证value里的值和数据库里name的值是不是对应的。</p><p>3.有时候一个表单里有多个提交按钮，后端怎么知道用户是点击哪个按钮提交过来的呢？这时候我们只要加隐藏域，对每一个按钮起个名字(value值)，后端接收到数据后，检查value值，就能知道是哪个按钮提交的了。</p><p>4.有时候一个网页中有多个form，我们知道多个form是不能同时提交的，但有时这些form确实相互作用，我们就可以在form中添加隐藏域来使它们联系起来。</p><p>5.防范CRSF攻击</p><p>#5.表单范例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/getInfo"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">value</span>=<span class="string">"56767889"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex1"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>/&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex1"</span> <span class="attr">value</span>=<span class="string">"女"</span>/&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sex"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>取向<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex2"</span> <span class="attr">value</span>=<span class="string">"男"</span> /&gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex2"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">checked</span>/&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hobby"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> &gt;</span>爱好<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"data"</span>/&gt;</span>data</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"旅游"</span> <span class="attr">checked</span>/&gt;</span>旅游</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"宠物"</span> <span class="attr">checked</span>/&gt;</span>宠物</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"textarea"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">" review"</span>&gt;</span>评论：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"review"</span> <span class="attr">id</span>=<span class="string">" review"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">                ddd</span><br><span class="line">            <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"csrf"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"select"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"car"</span>&gt;</span>我的car:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">id</span>=<span class="string">"car"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>  <span class="attr">value</span>=<span class="string">"萨博"</span> &gt;</span>萨博<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"奔驰"</span>&gt;</span>奔驰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"宝马"</span>&gt;</span>宝马<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/10372596-4d988248a8913936.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##post 和 get 方式提交数据有什么区别&lt;/p&gt;
&lt;p&gt;1.最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数;&lt;/p&gt;
&lt;p&gt;2.GET能被缓存，POST不能缓存 。&lt;/p&gt;
&lt;p&gt;3.GET历史参数保留在浏览器历史中。POS
      
    
    </summary>
    
      <category term="html" scheme="https://pengxiaohui00.github.io/categories/html/"/>
    
    
      <category term="html" scheme="https://pengxiaohui00.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>“事件循环：微任务 宏任务”</title>
    <link href="https://pengxiaohui00.github.io/2018/03/14/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%EF%BC%9A%E5%BE%AE%E4%BB%BB%E5%8A%A1%20%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    <id>https://pengxiaohui00.github.io/2018/03/14/事件循环：微任务 宏任务/</id>
    <published>2018-03-14T07:25:31.000Z</published>
    <updated>2018-09-15T09:39:56.026Z</updated>
    
    <content type="html"><![CDATA[<p>#前提：<br>JavaScript引擎有一个监听事件（monitoring process）的功能，会持续不断的检查js引擎的主线程执行栈是否为空，如果为空就会去取事件触发线程存放在事件队列中的回调函数执行。</p><p>#micro task 和 macro task</p><ul><li>浏览器的事件循环依靠已事件队列，但是一个进程中不止一个事件队列，大致可以分为micro task和macro task，常见的微任务和宏任务分别包括：</li></ul><p>##micro task ：</p><ul><li>nextTick</li><li>callback</li><li>Promise</li><li>process.nextTick</li><li>Object.observe</li><li>MutationObserver</li></ul><p>macro task：<br>-setTimeout</p><ul><li>setInterval</li><li>I/O<ul><li>script代码块<h1 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h1></li></ul></li><li>事件队列在同步队列执行完后，首先会执行nextTick，等nextTick执行完成后，</li><li>然后会先执行micro task， 等micro task队列空了之后，才会去执行macro task，</li><li>如果中间添加了micro task加入了micro task队列，会继续去执行micro task队列，然后再回到macro task队列。</li></ul><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>一段代码块就是一个宏任务。所有一般执行代码块的时候，也就是程序执行进入主线程了，主线程会根据不同的代码再分微任务和宏任务等待主线程执行完成后，不停地循环执行。<br>主线程（宏任务） =&gt; 微任务 =&gt; 宏任务 =&gt; 主线程</p><p>##范例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setTimeout( <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line"><span class="string">"a"</span></span><br><span class="line"><span class="string">"c"</span></span><br><span class="line"><span class="string">"promise"</span></span><br><span class="line"><span class="string">"timeout"</span></span><br></pre></td></tr></table></figure></p><p>1.当前task运行，执行代码。首先setTimeout的callback被添加到tasks queue中；<br>2.实例化promise，输出 a;<br>3.promise.then的callback被添加到microtasks queue中；<br>4.输出”c” ;<br>5.已到当前task的end，执行microtasks，输出”promise” ;<br>6.执行下一个task，输出”timeout”。</p><p>#总结：<br>1.主线程（宏任务） =&gt; 微任务 =&gt; 宏任务 =&gt; 主线程<br>2.微任务会被添加到一轮事件循环的尾部执行，就是吊车尾啦比如promise；<br>3.宏任务则被添加下一轮事件循环，主线程同步任务以被清空后执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#前提：&lt;br&gt;JavaScript引擎有一个监听事件（monitoring process）的功能，会持续不断的检查js引擎的主线程执行栈是否为空，如果为空就会去取事件触发线程存放在事件队列中的回调函数执行。&lt;/p&gt;
&lt;p&gt;#micro task 和 macro task
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://pengxiaohui00.github.io/2018/03/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://pengxiaohui00.github.io/2018/03/09/面向对象/</id>
    <published>2018-03-09T07:25:31.000Z</published>
    <updated>2018-09-15T09:40:39.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-中的对象"><a href="#JS-中的对象" class="headerlink" title="JS 中的对象"></a>JS 中的对象</h1><p>JS 中的对象是一系列无序 key: value 的集合</p><p>比如<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123; <span class="selector-tag">a</span>: <span class="number">1</span>, <span class="selector-tag">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="selector-tag">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'hunger'</span>,</span><br><span class="line">    sayName: function()&#123;</span><br><span class="line">        console.log(<span class="string">'My name is hunger'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以通过 对象.属性来获取对应属性的值<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(person.<span class="keyword">name</span>)</span><br><span class="line">person.sayName()</span><br><span class="line">但假设我们定义一个函数</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">sum</span>(a, b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">sum</span>.<span class="keyword">name</span>)   // =&gt; <span class="built_in">sum</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">sum</span>.length)  //<span class="number">2</span></span><br></pre></td></tr></table></figure></p><h1 id="构造对象"><a href="#构造对象" class="headerlink" title="构造对象"></a>构造对象</h1><p>我们可以抛开类，使用字面量来构造一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    nick: <span class="string">'Byron'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    printName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj1.nick);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    nick: <span class="string">'Casper'</span>,</span><br><span class="line">    age: <span class="number">25</span>,</span><br><span class="line">    printName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj2.nick);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：</p><ol><li><p>太麻烦了，每次构建一个对象都是复制一遍代码</p></li><li><p>如果想个性化，只能通过手工赋值，使用者必需了解对象详细</p></li></ol><h2 id="使用函数做自动化"><a href="#使用函数做自动化" class="headerlink" title="使用函数做自动化"></a>使用函数做自动化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">nick, age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      nick: nick,</span><br><span class="line">      age: age,</span><br><span class="line">      printName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.nick);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj3 = createObj(<span class="string">'Byron'</span>, <span class="number">30</span>);</span><br><span class="line">obj3.printName();</span><br></pre></td></tr></table></figure><p>通过创建一个函数来实现自动创建对象的过程，至于个性化通过参数实现，开发者不必关注细节，只需要传入指定参数即可</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul><li><p>任何函数使用new表达式就是构造函数</p></li><li><p>每个<strong>函数</strong>都自动添加一个名称为<code>prototype</code>属性，这是一个对象</p></li><li><p>每个<strong>对象</strong>都有一个内部属性 <code>__proto__</code>(规范中没有指定这个名称，但是浏览器都这么实现的) 指向其类型的prototype属性，类的实例也是对象，其<strong><code>__proto__</code></strong>属性指向“类”的prototype</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Modal</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = msg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> modal = <span class="keyword">new</span> Modal()</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">modal</span><br><span class="line">Modal &#123;<span class="attr">msg</span>: <span class="literal">undefined</span>&#125;msg: undefined__proto__: Objectconstructor: ƒ Modal(msg)__proto__: <span class="built_in">Object</span></span><br><span class="line">modal.msg</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>过程：<br>1.创建了一个空对象{}，并把这个空对象的<strong>proto</strong>指向Modal.prototype.</p><p>2.执行函数Modal(），执行过程中对 this 操作就是对 新创建对象 进行操作，未传入传输，可理解为传入值为undefined，然后这个对象的msg ：undefined；</p><p>3.函数执行完后返回这个对象，然后把这个对象赋值给modal；</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof是一个操作符，可以判断<strong>对象</strong>是否为某个类型的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modal <span class="keyword">instanceof</span> Modal( ; <span class="comment">// true</span></span><br><span class="line">modal  <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>instanceof判断的是对象</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">1 </span>instanceof Number; // false</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JS-中的对象&quot;&gt;&lt;a href=&quot;#JS-中的对象&quot; class=&quot;headerlink&quot; title=&quot;JS 中的对象&quot;&gt;&lt;/a&gt;JS 中的对象&lt;/h1&gt;&lt;p&gt;JS 中的对象是一系列无序 key: value 的集合&lt;/p&gt;
&lt;p&gt;比如&lt;br&gt;&lt;figure 
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>闭包与作用域</title>
    <link href="https://pengxiaohui00.github.io/2018/03/06/%E9%97%AD%E5%8C%85%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://pengxiaohui00.github.io/2018/03/06/闭包与作用域/</id>
    <published>2018-03-06T07:25:31.000Z</published>
    <updated>2018-09-15T09:40:27.082Z</updated>
    
    <content type="html"><![CDATA[<p>#什么是闭包：</p><ul><li>闭包是函数和函数声明所在其词法作用域的组合(MDN)</li><li>函数连同它作用域链上的要找的这个变量，共同构成闭包</li></ul><h2 id="看懂之前博客"><a href="#看懂之前博客" class="headerlink" title="看懂之前博客"></a>看懂之前博客</h2><p><a href="https://www.jianshu.com/p/536aa20d5564" target="_blank" rel="noopener">理解作用域</a></p><ul><li>函数在执行的过程中，先从自己内部找变量</li><li>如果找不到，再从创建当前函数所在的作用域(词法作用域)去找, 以此往上</li><li>注意找的是变量的当前的状态<br>列如：<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title">init</span>() &#123;</span><br><span class="line">    var name = xiaohui"; // name 是一个被 init 创建的局部变量</span><br><span class="line">    <span class="keyword">function</span> <span class="title">displayName</span>() &#123; // displayName() 是内部函数,一个闭包</span><br><span class="line">        alert(name); // 使用了父函数中声明的变量</span><br><span class="line">    &#125;</span><br><span class="line">    displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure></li></ul><h2 id="这就是一个闭包"><a href="#这就是一个闭包" class="headerlink" title="这就是一个闭包"></a>这就是一个闭包</h2><p>函数模型方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        i+=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> add=fn1();</span><br><span class="line">add();<span class="comment">//2</span></span><br><span class="line">add();<span class="comment">//3</span></span><br><span class="line">add();<span class="comment">//4</span></span><br></pre></td></tr></table></figure></p><p>对象模型方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createNumber</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getnum:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num;</span><br><span class="line">    &#125;,</span><br><span class="line">    setnum:<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      num = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n = createNumber();</span><br><span class="line">n.setnum(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n.getnum())</span><br></pre></td></tr></table></figure></p><h2 id="一般情况下使用闭包主要是为了"><a href="#一般情况下使用闭包主要是为了" class="headerlink" title="一般情况下使用闭包主要是为了"></a>一般情况下使用闭包主要是为了</h2><ul><li>封装数据</li><li>暂存数据`</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>理解了下面几个案例，你就能熟练理解运用闭包了</p><p>如下代码输出多少？如果想输出3，那如何改造代码？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">  fnArr[i] =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( fnArr[<span class="number">3</span>]() )  <span class="comment">//10</span></span><br></pre></td></tr></table></figure></p><p>闭包<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]());</span><br></pre></td></tr></table></figure></p><p>立即执行函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    (   <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">        fnArr[i]= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]());</span><br></pre></td></tr></table></figure></p><p>es6<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    fnArr[i]=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fnArr[<span class="number">3</span>]());</span><br></pre></td></tr></table></figure></p><h2 id="封装一个-Car-对象。"><a href="#封装一个-Car-对象。" class="headerlink" title="封装一个 Car 对象。"></a>封装一个 Car 对象。</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> speed = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">(s)</span></span>&#123;</span><br><span class="line">        speed=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">speedUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        speed++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">speedDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        speed--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">set</span>: <span class="keyword">set</span>,</span><br><span class="line">        <span class="keyword">get</span>: <span class="keyword">get</span>,</span><br><span class="line">        speedUp: speedUp,</span><br><span class="line">        speedDown: speedDown</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="如下代码输出多少？如何连续输出-0-1-2-3-4？"><a href="#如下代码输出多少？如何连续输出-0-1-2-3-4？" class="headerlink" title="如下代码输出多少？如何连续输出 0,1,2,3,4？"></a>如下代码输出多少？如何连续输出 0,1,2,3,4？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'delayer:'</span> + i )</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;   <span class="comment">//5 5 5 5 5;</span></span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">var</span> i=0<span class="comment">; i&lt;5; i++)&#123;</span></span><br><span class="line">    (<span class="name">function</span>(<span class="name">j</span>)&#123;</span><br><span class="line">        setTimeout(<span class="name">function</span>()&#123;</span><br><span class="line">            console.log('delayer:' + j )</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;(<span class="name">i</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (<span class="name">var</span> i=0<span class="comment">;i&lt;5;i++)&#123;</span></span><br><span class="line">    setTimeout((<span class="name">function</span> (<span class="name">j</span>) &#123;</span><br><span class="line">            return function()&#123;</span><br><span class="line">                console.log('delayer:'+j)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(<span class="name">i</span>))</span><br><span class="line">    ,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下代码输出多少？<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> makeCounter() &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> count++</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> counter = makeCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter());<span class="string">\\0</span></span><br><span class="line"><span class="built_in">console</span>.log(counter());<span class="string">\\1</span></span><br><span class="line"><span class="built_in">console</span>.log(counter());<span class="string">\\2</span></span><br><span class="line"><span class="built_in">console</span>.log(counter());<span class="string">\\3</span></span><br><span class="line"><span class="keyword">var</span> counter2 = makeCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter2());<span class="string">\\0</span></span><br><span class="line"><span class="built_in">console</span>.log(counter2());<span class="string">\\1</span></span><br><span class="line"><span class="built_in">console</span>.log(counter2());<span class="string">\\2</span></span><br><span class="line"><span class="built_in">console</span>.log(counter2());<span class="string">\\3</span></span><br></pre></td></tr></table></figure></p><h2 id="补全代码，实现数组按姓名、年纪、任意字段排序"><a href="#补全代码，实现数组按姓名、年纪、任意字段排序" class="headerlink" title="补全代码，实现数组按姓名、年纪、任意字段排序"></a>补全代码，实现数组按姓名、年纪、任意字段排序</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var users = [</span><br><span class="line">    &#123; name: <span class="string">"John"</span>, age: <span class="number">20</span>, company: <span class="string">"Baidu"</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">"Pete"</span>, age: <span class="number">18</span>, company: <span class="string">"Alibaba"</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">"Ann"</span>, age: <span class="number">19</span>, company: <span class="string">"Tecent"</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byName</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1.name&gt;v2.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byAge</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1.age&gt;v2.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byCompany</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1.company&gt;v2.company;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byField</span><span class="params">(field)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(v1,v2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v1[field]&gt;v2[field]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(users.<span class="built_in">sort</span>(byName))</span><br><span class="line">console.<span class="built_in">log</span>(users.<span class="built_in">sort</span>(byAge))</span><br><span class="line">console.<span class="built_in">log</span>(users.<span class="built_in">sort</span>(byCompany))</span><br><span class="line">console.<span class="built_in">log</span>(users.<span class="built_in">sort</span>(byField(<span class="string">'age'</span>)))</span><br><span class="line">console.<span class="built_in">log</span>(users.<span class="built_in">sort</span>(byField(<span class="string">'company'</span>)))</span><br></pre></td></tr></table></figure><p>写一个 sum 函数，实现如下调用方式<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">sum</span>(a)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">sum</span>(<span class="number">1</span>)(<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#什么是闭包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;闭包是函数和函数声明所在其词法作用域的组合(MDN)&lt;/li&gt;
&lt;li&gt;函数连同它作用域链上的要找的这个变量，共同构成闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;看懂之前博客&quot;&gt;&lt;a href=&quot;#看懂之前博客&quot; class=&quot;he
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>“JS 类型隐式转换”</title>
    <link href="https://pengxiaohui00.github.io/2018/03/05/%E2%80%9CJS%20%E7%B1%BB%E5%9E%8B%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2%E2%80%9D/"/>
    <id>https://pengxiaohui00.github.io/2018/03/05/“JS 类型隐式转换”/</id>
    <published>2018-03-05T07:40:36.000Z</published>
    <updated>2018-09-15T09:38:57.116Z</updated>
    
    <content type="html"><![CDATA[<p>##1、js数据类型<br>js中有7种数据类型，可以分为两类：原始类型、对象类型：</p><p>基础类型(原始值)：</p><p>Undefined、 Null、 String、 Number、 Boolean、 Symbol (es6新出的，本文不讨论这种类型)<br>复杂类型(对象值)：</p><p>object</p><p>#2、三种隐式转换类型<br>js中一个难点就是js隐形转换，因为js在一些操作符下其类型会做一些变化，所以js灵活，同时造成易出错，并且难以理解。</p><p>涉及隐式转换最多的两个运算符 + 和 ==。</p><p>+运算符即可数字相加，也可以字符串相加。所以转换时很麻烦，有些也比较难理解：<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[]+&#123;&#125;</span><br><span class="line"><span class="string">"[object Object]"</span></span><br><span class="line">&#123;&#125;+[]</span><br><span class="line"><span class="string">"a"</span>+[]</span><br><span class="line"><span class="string">"a"</span></span><br><span class="line"><span class="string">"a"</span>+&#123;&#125;</span><br><span class="line"><span class="string">"a[object Object]"</span></span><br><span class="line"><span class="number">1</span>+[]</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"><span class="number">1</span>+&#123;&#125;</span><br><span class="line"><span class="string">"1[object Obje</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1+'0'</span></span><br><span class="line"><span class="string">"</span><span class="number">10</span><span class="string">"</span></span><br><span class="line"><span class="string">null+1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">null+"</span><span class="string">q"</span></span><br><span class="line"><span class="string">"</span><span class="literal">null</span><span class="string">q"</span></span><br><span class="line"><span class="string">undefined+1</span></span><br><span class="line"><span class="string">NaN</span></span><br><span class="line"><span class="string">undefined+"</span>b<span class="string">"</span></span><br><span class="line"><span class="string">"</span>undefinedb<span class="string">"</span></span><br><span class="line"><span class="string">NaN+1</span></span><br><span class="line"><span class="string">NaN</span></span><br><span class="line"><span class="string">NaN+"c</span><span class="string">"</span></span><br><span class="line"><span class="string">"</span>NaNc<span class="string">"</span></span><br></pre></td></tr></table></figure></p><p>== 不同于===，故也存在隐式转换。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">undefined</span>==null</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="attribute">null</span>==1</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="attribute">null</span>==0</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="attribute">undefined</span>==1</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="attribute">undefined</span>==0</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">[1]==1</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">var a=&#123;1:1&#125;</span><br><span class="line">undefined</span><br><span class="line"><span class="attribute">a</span>==1</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><ul><li><ul><li>/ 这些运算符只会针对number类型，故转换的结果只能是转换成number类型,比较简单。</li></ul></li></ul><p>#既然要隐式转换，那到底怎么转换呢，应该有一套转换规则，才能追踪最终转换成什么了。</p><h2 id="隐式转换中主要涉及到三种转换："><a href="#隐式转换中主要涉及到三种转换：" class="headerlink" title="隐式转换中主要涉及到三种转换："></a>隐式转换中主要涉及到三种转换：</h2><p>1、将值转为原始值，ToPrimitive()。</p><p>2、将值转为数字，ToNumber()。</p><p>3、将值转为字符串，ToString()。</p><h2 id="2-1、通过ToPrimitive将值转换为原始值"><a href="#2-1、通过ToPrimitive将值转换为原始值" class="headerlink" title="2.1、通过ToPrimitive将值转换为原始值"></a>2.1、通过ToPrimitive将值转换为原始值</h2><p>js引擎内部的抽象操作ToPrimitive有着这样的签名：</p><p>ToPrimitive(input, PreferredType?)</p><p>input是要转换的值，PreferredType是可选参数，可以是Number或String类型。<br>他只是一个转换标志，转化后的结果并不一定是这个参数所值的类型，但是转换结果一定是一个原始值（或者报错）。</p><p>##2.1.1、如果PreferredType被标记为Number，则会进行下面的操作流程来转换输入的值。<br>1、如果输入的值已经是一个原始值，则直接返回它<br>2、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，<br>   如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>3、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p><p>##2.1.2、如果PreferredType被标记为String，则会进行下面的操作流程来转换输入的值。<br>1、如果输入的值已经是一个原始值，则直接返回它<br>2、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>3、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，<br>   如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p><p>##既然PreferredType是可选参数，那么如果没有这个参数时，怎么转换呢？</p><p>PreferredType的值会按照这样的规则来自动设置：</p><p>1、该对象为Date类型，则PreferredType被设置为String</p><p>2、否则，PreferredType被设置为Number</p><p>##2.1.3、valueOf方法和toString方法解析</p><p>##上面主要提及到了valueOf方法和toString方法，那这两个方法在对象里是否一定存在呢？<br>答案是肯定的。在控制台输出Object.prototype，你会发现其中就有valueOf和toString方法，而Object.prototype是所有对象原型链顶层原型，所有对象都会继承该原型的方法，故任何对象都会有valueOf和toString方法。</p><p>##对象的valueOf函数，其转换结果是什么？<br>对于js的常见内置对象：Date, Array, Math, Number, Boolean, String, Array, RegExp, Function。</p><h3 id="1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如："><a href="#1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如：" class="headerlink" title="1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如："></a>1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如：</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">num</span> = <span class="keyword">new</span> Number(<span class="string">'123'</span>);</span><br><span class="line"><span class="built_in">num</span>.valueOf(); <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.valueOf(); <span class="comment">// '12df'</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">bool</span> = <span class="keyword">new</span> Boolean(<span class="string">'fd'</span>);</span><br><span class="line"><span class="built_in">bool</span>.valueOf(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>###2、Date这种特殊的对象，其原型Date.prototype上内置的valueOf函数将日期转换为日期的毫秒的形式的数值。<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">new</span> <span class="title">Date</span>();</span></span><br><span class="line"><span class="function"><span class="title">a</span>.<span class="title">valueOf</span>(); <span class="comment">// 1532234132475</span></span></span><br></pre></td></tr></table></figure></p><h2 id="3、除此之外返回的都为this，即对象本身："><a href="#3、除此之外返回的都为this，即对象本身：" class="headerlink" title="3、除此之外返回的都为this，即对象本身："></a>3、除此之外返回的都为this，即对象本身：</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="type">Array</span>();</span><br><span class="line">a.valueOf() === a;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="type">Object</span>(&#123;&#125;);</span><br><span class="line">b.valueOf() === b;</span><br><span class="line"> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>##toString函数，其转换结果是什么？</p><p>对于js的常见内置对象：Date, Array, Math, Number, Boolean, String, Array, RegExp, Function。</p><p>1、Number、Boolean、String、Array、Date、RegExp、Function这几种构造函数生成的对象，通过toString转换后会变成相应的字符串的形式，因为这些构造函数上封装了自己的toString方法。如：<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'123sd'</span>);</span><br><span class="line">num.toString(); <span class="comment">// 'NaN'</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.toString(); <span class="comment">// '12df'</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">bool</span> = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'fd'</span>);</span><br><span class="line"><span class="built_in">bool</span>.toString(); <span class="comment">// 'true'</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">arr.toString(); <span class="comment">// '1,2'</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.toString(); <span class="comment">// "Sun Jul 22 2018 12:38:42 GMT+0800 (中国标准时间)"</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">func.toString(); <span class="comment">// "function () &#123;&#125;"</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;);</span><br><span class="line">obj.toString(); <span class="comment">// "[object Object]"</span></span><br><span class="line"><span class="built_in">Math</span>.toString(); <span class="comment">// "[object Math]"</span></span><br></pre></td></tr></table></figure></p><p>##除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型，都是继承的Object.prototype.toString方法。</p><p>##从上面valueOf和toString两个函数对对象的转换可以看出为什么对于ToPrimitive(input, PreferredType?)</p><p>####PreferredType没有设定的时候，除了Date类型，PreferredType被设置为String，其它的会设置成Number。</p><ul><li>因为valueOf函数会将Number、String、Boolean基础类型的对象类型值转换成 基础类型，Date类型转换为毫秒数，其它的返回对象本身.</li><li>而toString方法会将所有对象转换为字符串。</li><li>显然对于大部分对象转换，valueOf转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想toString方法一样，一股脑将其转换为字符串。</li></ul><p>所以对于没有指定PreferredType类型时，先进行valueOf方法转换更好，故将PreferredType设置为Number类型。</p><p>而对于Date类型，其进行valueOf转换为毫秒数的number类型。在进行隐式转换时，没有指定将其转换为number类型时，将其转换为那么大的number类型的值显然没有多大意义。（不管是在+运算符还是==运算符）还不如转换为字符串格式的日期，所以默认Date类型会优先进行toString转换。故有以上的规则：</p><p>PreferredType没有设置时，Date类型的对象，PreferredType默认设置为String，其他类型对象PreferredType默认设置为Number。</p><p>##2.2、通过To Number将值转换为数字<br><img src="https://upload-images.jianshu.io/upload_images/10372596-d428663fe9356a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="28.png"><br>注意：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'12a'</span>==12</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>#2.3、通过ToString将值转换为字符串<br>根据参数类型进行下面转换：<br>undefined ’undefined’<br>null ’null’<br>布尔值转换为’true’ 或 ‘false’<br>数字转换字符串，比如：1.765转为’1.765’<br>对象(obj)先进行 ToPrimitive(obj, String)转换得到原始值，在进行ToString转换为字符串<br>讲了这么多，是不是还不是很清晰，先来看看一个例子：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">(</span><span class="template-variable">&#123;&#125;</span><span class="xml"> + </span><span class="template-variable">&#123;&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">//[object Object]</span></span><br></pre></td></tr></table></figure></p><p>两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。<br>1、进行ToPrimitive转换，由于没有指定PreferredType类型，{}会使默认值为Number，进行ToPrimitive(input, Number)运算。<br>2、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。<br>3、继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。<br>故得到最终的结果，”[object Object]” + “[object Object]” = “[object Object][object Object]”</p><p>再来一个指定类型的例子：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> * &#123;&#125;</span><br><span class="line"> <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></p><p>1、首先<em>运算符只能对number类型进行运算，故第一步就是对{}进行ToNumber类型转换。<br>2、由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。<br>3、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。<br>4、继续执行toString方法，({}).toString(),返回”[object Object]”，是原始值。<br>5、转换为原始值后再进行ToNumber运算，”[object Object]”就转换为NaN。<br>故最终的结果为 2 </em> NaN = NaN</p><p>#3、== 运算符隐式转换</p><p>##类型相同时，没有类型转换，主要注意NaN不与任何值相等，包括它自己，即NaN !== NaN。</p><p>##==在比较的时候可以转换数据类型，若等式两边数据类型不相同，将会往数值类型方向转换后再进行比较<br>1、x,y 为null、undefined两者中一个 // 返回true</p><p>2、x、y为Number和String类型时，则转换为Number类型比较。</p><p>3、有Boolean类型时，Boolean转化为Number类型比较。</p><p>4、一个Object类型，一个String或Number类型，将Object类型进行原始转换后，按上面流程进行原始值比较。<br><img src="https://upload-images.jianshu.io/upload_images/10372596-a99289f2861c4267.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="27.jpg"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> == <span class="number">0</span>  <span class="comment">//ture</span></span><br><span class="line"><span class="string">" "</span> == <span class="number">0</span>  <span class="comment">//ture</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">true</span>  <span class="comment">//false</span></span><br><span class="line"><span class="string">""</span> == <span class="literal">false</span>  <span class="comment">//ture</span></span><br><span class="line"><span class="string">" "</span> == <span class="literal">true</span>  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" "</span> == <span class="literal">true</span>  <span class="comment">//false</span></span><br><span class="line"><span class="string">" "</span> == <span class="literal">false</span>  <span class="comment">//ture</span></span><br><span class="line"><span class="string">"hello"</span> == <span class="literal">true</span>  <span class="comment">//false</span></span><br><span class="line"><span class="string">"hello"</span> == <span class="literal">false</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">"0"</span> == <span class="literal">true</span>  <span class="comment">//false</span></span><br><span class="line"><span class="string">"0"</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="string">"00"</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br><span class="line"><span class="string">"0.00"</span> == <span class="literal">false</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>  <span class="comment">//ture</span></span><br><span class="line"> <span class="literal">true</span> ==&#123;&#125; <span class="comment">//false</span></span><br><span class="line">[] == <span class="literal">true</span>  <span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">0</span>,</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj == <span class="string">"[object Object]"</span>  <span class="comment">//false</span></span><br><span class="line">obj == <span class="number">1</span>  <span class="comment">//true</span></span><br><span class="line">obj == <span class="literal">true</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>##注意<br>1.==等好两边都为对象时，比较的是地址<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[]==[]</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="string">&#123;&#125;==&#123;&#125;</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>2.对象转化成数值为NaN,数组则不一定。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">123</span>]</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="number">123</span>:<span class="number">123</span>&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">Number</span>(arr)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="built_in">Number</span>(obj)</span><br><span class="line"><span class="literal">NaN</span></span><br><span class="line">obj == <span class="number">123</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line">arr == <span class="number">123</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/10372596-553fdffd2bd3cd04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>###3.1、== 例子解析<br>所以类型不相同时，可以会进行上面几条的比较，比如：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     return1;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span><span class="string">'123'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">true</span> == a <span class="comment">// true;</span></span><br></pre></td></tr></table></figure></p><p>boolean类型进行ToNumber转换为1<br>object类型，对y进行原始转换，ToPrimitive(a, ?),没有指定转换类型，默认number类型。<br>而后，ToPrimitive(a, Number)首先调用valueOf方法，返回1，得到原始类型1。<br>最后 1 == 1， 返回true。</p><p>我们再看一段很复杂的比较，如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta"></span>] == !&#123;&#125;</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>1、! 运算符优先级高于==，故先进行！运算。<br>2、!{}运算结果为false，结果变成 [] == false比较。<br>3、转换数字类型结果变成 [] == 0。<br>比较变成ToPrimitive([]) == 0。<br>    按照上面规则进行原始值转换，[]会先调用valueOf函数，返回this。<br>   不是原始值，继续调用toString方法， [].toString() = ‘’。<br>   故结果为 ‘’ == 0比较。<br>5、 ToNumber(‘’) = 0。<br>   所以结果变为： 0 == 0，返回true，比较结束。</p><p>最后看看这道题目：</p><p>const a = {<br>  i: 1,<br>  toString: function () {<br>    return a.i++;<br>  }<br>}<br>if (a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {<br>  console.log(‘hello world!’);<br>}</p><p>1、当执行a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 时，会从左到右一步一步解析，首先 a == 1，会进行上面第9步转换。ToPrimitive(a， Number) == 1。</p><p>2、ToPrimitive(a, Number)，按照上面原始类型转换规则，会先调用valueOf方法，a的valueOf方法继承自Object.prototype。返回a本身，而非原始类型，故会调用toString方法。</p><p>3、因为toString被重写，所以会调用重写的toString方法，故返回1，注意这里是i++，而不是++i，它会先返回i，在将i+1。故ToPrimitive(a, Number) = 1。也就是1 == 1，此时i = 1 + 1 = 2。</p><p>4、执行完a == 1返回true，会执行a == 2，同理，会调用ToPrimitive(a, Number)，同上先调用valueOf方法，在调用toString方法，由于第一步，i = 2此时，ToPrimitive(a, Number) = 2， 也就是2 == 2, 此时i = 2 + 1。</p><p>5、同上可以推导 a == 3也返回true。故最终结果 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3返回true</p><p>再比如：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;+<span class="selector-attr">[]</span></span><br><span class="line">0</span><br><span class="line"><span class="selector-attr">[]</span>+&#123;&#125;</span><br><span class="line">"<span class="selector-attr">[object Object]</span>"</span><br><span class="line">0+&#123;&#125;</span><br><span class="line">"0<span class="selector-attr">[object Object]</span>"</span><br><span class="line">&#123;&#125;+0</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>是因为{}可以是空块或空对象文字，具体取决于上下文。</p><ul><li>可以是一元加运算符，也可以是连接运算符，具体取决于上下文。</li></ul><p>第一个代码示例是一个空块，它可能也不存在，使表达式相同+[]，意思是“空数组转换为数字”。</p><p>你不能把一个块作为一个函数参数，所以第二个代码示例{}是一个对象，代码的意思是“用一个数组来传递一个对象”（隐式地将对象和数组转换为字符串）。换句话说，{} + []表达式是一个empty代码块，后面跟array一个数字（Number[]）的约束。</p><p>在第二个示例中，您只是向concat数组提供了一个对象文字（空对象）。这就是你收到的原因[object Object]。<br>再比如：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span><span class="string">==0</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">null</span><span class="string">==1</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="string">+null</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><a href="http://es5.github.io/#x8.2" target="_blank" rel="noopener">Null类型的</a>比较不等于1或0（实际上，null仅与<code>undefined</code> 相当),但当强制转换ToNumber（null）===0；</p><p>#最终null==undefined//true ,实在无法理解，暂时只能理解这就是个坑，强行死记硬背。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1、js数据类型&lt;br&gt;js中有7种数据类型，可以分为两类：原始类型、对象类型：&lt;/p&gt;
&lt;p&gt;基础类型(原始值)：&lt;/p&gt;
&lt;p&gt;Undefined、 Null、 String、 Number、 Boolean、 Symbol (es6新出的，本文不讨论这种类型)&lt;b
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>DOM动态集合</title>
    <link href="https://pengxiaohui00.github.io/2018/02/03/DOM%E5%8A%A8%E6%80%81%E9%9B%86%E5%90%88/"/>
    <id>https://pengxiaohui00.github.io/2018/02/03/DOM动态集合/</id>
    <published>2018-02-03T07:05:49.000Z</published>
    <updated>2018-09-15T09:39:20.458Z</updated>
    
    <content type="html"><![CDATA[<p>##DOM是JavaScript中重要部分之一，在DOM中有一个动态集合。<br>这个动态集合包含节点的集合（NodeList）、元素属性的集合（NamedNodeMap）和HTML元素的集合（HTMLCollection）。这三个对象都是类数组（Array-like），具有像数组一样的特性</p><p>##类数组：比如arguments</p><ul><li>具有：指向对象元素的数字索引下标以及length属性告诉我们对象的元素个数</li><li>不具有：不具有诸如push()、forEach()以及indexOf()等数组对象具有的方法<br>##将类数组对象转换为数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span>  arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">let</span>  arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">//还可以使用ES6中的扩展运算符...将某些数据结构转换成数组，这种数据结构必须有遍历器接口。</span></span><br><span class="line"><span class="keyword">let</span>  arr = [...arguments];</span><br></pre></td></tr></table></figure></li></ul><p>##NodeList集合</p><ul><li>NodeList实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到NodeList实例。<br>Node.childNodes<br>document.querySelectorAll()、<br>#HTMLCollection</li><li>一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。</li><li>HTMLCollection的集合可以通过getElementsByTagName()、getElementsByName()、document.getElementsByClassName()、document.anchors、document.forms、document.images和documnet.links等方式来获取。<h1 id="NameNodeMap集合"><a href="#NameNodeMap集合" class="headerlink" title="NameNodeMap集合"></a>NameNodeMap集合</h1>DOM中的Element节点是唯一拥有attributes属性的一种节点类型。而attributes属性中就包含NamedNodeMap集合。NamedNodeMap集合的元素拥有nodeName和nodeValue属性，分别表示元素节点名称和值。<h1 id="三者的异同"><a href="#三者的异同" class="headerlink" title="三者的异同"></a>三者的异同</h1>##共同点</li><li><p>三者都具有length属性</p></li><li><p>三者都有item()方法</p></li><li><p>三者都是动态的，如果对NodeList和HTMLCollection中的元素进行操作都会直接反映到DOM中，因此如果一次性直接在集合中进行DOM操作，开销非常大</p></li></ul><h2 id="不同之处："><a href="#不同之处：" class="headerlink" title="不同之处："></a>不同之处：</h2><ul><li><p>NodeList里面包含了所有的节点类型</p></li><li><p>HTMLCollection里面只包含元素节点</p></li><li><p>NamedNodeMap里面包含了Attribute的集合，例如id、title、class等，集合中的每一个元素都是attr类型</p></li><li><p>三者所提供的方法也有不同，例如HTMLCollection中提供了namedItem()，而NodeList和NamedNodeMap两个集合中没有namedItem()方法</p></li></ul><h1 id="动态NodeList和静态NodeList"><a href="#动态NodeList和静态NodeList" class="headerlink" title="动态NodeList和静态NodeList"></a>动态NodeList和静态NodeList</h1><ul><li>getElementsByTagName()方法返回一个动态（live）的HTMLCollection，</li><li>而querySelectorAll()返回的是一个静态（static）的NodeList<br>##动态集合<br>DOM中的NodeList和NamedNodeMap对象是动态的；也就是说，对底层文档结构的修改会动态地反映到相关的集合NodeList和NamedNodeMap中。例如，如果先获取了某个元素（Element）的子元素的动态集合NodeList对象，然后又在其他地方顺序添加更多子元素到这个DOM父元素中（可以说添加、修改、删除子元素等操作），这些更改将自动反射到NodeList，不需要手动进行其他调用。同样地，对DOM树上某个Node节点的修改，也会实时影响引用了该节点的NodeList和NamedNodeMap对象。<br>##静态集合<br>querySelectorAll()方法返回的NodeList对象必须是静态的，而不能是动态的。后续对底层document的更改不能影响到返回的这个NodeList对象。这意味着返回的对象将包含在创建列表那一刻匹配的所有元素节点<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> liveNodeList1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList1)</span><br><span class="line"><span class="keyword">let</span> liveNodeList2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'.item'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> liveNodeList3 = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.item'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> children = box.childNodes;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(children, children.length)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10372596-2407afc5135e2528.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1..png"></p><p>#为什么动态集合比静态集合更快</p><p>##为什么说getElementsByTagName()在所有浏览器上都比auerySelectorAll()要快好多倍。</p><ul><li>让 querySelectorAll() 和 getElementsByTagName() 具有相同的参数和行为, 但有很大的不同点。 在前一种情况下, 返回的 NodeList 就是方法被调用时刻的文档状态的快照, 而后者总是会随时根据document的状态而更新</li><li>使用getElementsByTagName()方法我们得到的结果就像是一个对象的索引，而通过querySelectorAll()方法我们得到的是一个对象的克隆；所以当这个对象数据量非常大的时候，显然克隆这个对象所需要花费的时间是很长的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line"><span class="keyword">let</span> liveNodeList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList, liveNodeList.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newEle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">newEle.textContent = <span class="string">'新创建的div元素'</span></span><br><span class="line"></span><br><span class="line">box.appendChild(newEle)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList, liveNodeList.length)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/10372596-7f850e12f1604752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> liveNodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList, liveNodeList.length)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newEle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">newEle.textContent = <span class="string">'新创建的div元素'</span></span><br><span class="line">box.appendChild(newEle)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList, liveNodeList.length)</span><br><span class="line"></span><br><span class="line">liveNodeList = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(liveNodeList, liveNodeList.length)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/10372596-22de2a94da8cb438.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##DOM是JavaScript中重要部分之一，在DOM中有一个动态集合。&lt;br&gt;这个动态集合包含节点的集合（NodeList）、元素属性的集合（NamedNodeMap）和HTML元素的集合（HTMLCollection）。这三个对象都是类数组（Array-like），具
      
    
    </summary>
    
      <category term="js" scheme="https://pengxiaohui00.github.io/categories/js/"/>
    
    
      <category term="js" scheme="https://pengxiaohui00.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从URL输入到页面展现</title>
    <link href="https://pengxiaohui00.github.io/2018/02/03/%E4%BB%8EURL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0/"/>
    <id>https://pengxiaohui00.github.io/2018/02/03/从URL输入到页面展现/</id>
    <published>2018-02-03T07:05:49.000Z</published>
    <updated>2018-09-15T12:27:52.189Z</updated>
    
    <content type="html"><![CDATA[<p>#前言<br>当用户打开浏览器，在地址栏输入 <a href="https://www.baidu.com/，按下回车，页面展示百度首页。整个过程发生了什么呢？" target="_blank" rel="noopener">https://www.baidu.com/，按下回车，页面展示百度首页。整个过程发生了什么呢？</a></p><p>#一、输入URL</p><ul><li><p>URL统一资源定位符，也平时我们说的网址。浏览器通过URL来查找和定位资源的位置。</p></li><li><p>url的格式一般为：</p></li></ul><p>协议类型://&lt;服务器地址&gt;:&lt;服务器端口号&gt;/&lt;文件路径&gt;/</p><p>####常见的协议有http、https、telnet、ftp、file等。</p><ul><li>其中http是最常见的超文本传输协议</li><li>而https（超文本传输安全协议）则是由http通过与SSL （安全套接层）或TLS（安全传输协议）的组合使用，加密的HTTP的通信内容。因此HTTPS比HTTP协议更加安全。</li></ul><p>####服务器地址是URL指定待访问的地址。可以是域名或主机号，或ip地址</p><p>####服务器端口号指服务器连接的网络端口号。若用户省去，则为默认端口号</p><ul><li>因为一台计算机常常会同时作为Web，FTP等服务器，端口编号用来告诉web服务器所在的主机要将请求交给哪个服务。</li><li>默认情况下http服务的端口为80。ftp为21，HTTPS为443，telnet为23.</li></ul><p>####文件路径则是服务器上文件路径定位上的资源，也就是目录</p><h4 id="https-www-baidu-com-使用的是HTTPS协议，服务器地址则是域名。"><a href="#https-www-baidu-com-使用的是HTTPS协议，服务器地址则是域名。" class="headerlink" title="https://www.baidu.com/使用的是HTTPS协议，服务器地址则是域名。"></a><a href="https://www.baidu.com/使用的是HTTPS协议，服务器地址则是域名。" target="_blank" rel="noopener">https://www.baidu.com/使用的是HTTPS协议，服务器地址则是域名。</a></h4><p><img src="http://upload-images.jianshu.io/upload_images/10372596-08048862ade0d0b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20.png"></p><p>##二、域名解析</p><ul><li>DNS服务是提供域名到IP地址之间的解析服务。计算机即可以被赋予ip地址，也可以被赋予主机号和域名，比如<a href="http://www.baidu.com。" target="_blank" rel="noopener">www.baidu.com。</a></li><li>用户通常使用主机号与域名来访问其他计算机，因为更容易记忆。</li><li>IP地址是指互联网协议地址，每个处于互联网中的设备都有IP 地址，形如192.168.1.10</li><li>局域网 IP 和公网 IP 是有差别的</li><li>127.0.0.1代表本机的 IP</li></ul><p>当用户在浏览器中输入<a href="https://www.baidu.com/后,你使用的计算机会发出一个DNS请求到本地DNS服务器。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动,中国联通DNS请求到达本地DNS服务器之后会有以下几个步骤" target="_blank" rel="noopener">https://www.baidu.com/后,你使用的计算机会发出一个DNS请求到本地DNS服务器。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动,中国联通DNS请求到达本地DNS服务器之后会有以下几个步骤</a></p><p>####1 搜索浏览器缓存<br>浏览器会缓存DNS记录一段时间，且有数量限制</p><p>####2 搜索操作系统缓存<br>从 Hosts 文件查找是否有该域名与对应 IP</p><p>####3 搜索路由器缓存<br>一般路由器也会缓存域名信息</p><p>####4搜索ISP(互联网服务提供商）NDS缓存<br>比如到中国移动的 DNS 上查找缓存</p><p>####5若都没有找到，则向根域名服务器查找域名对应 IP，根域名服务器把请求转发到下一级，直到找到对应IP</p><p>##三 .TCP连接</p><ul><li>拿到域名对应的IP地址之后，指浏览器会以一个随机端口（1024 &lt; 端口 &lt; 65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。</li><li>3次握手，详细展开很麻烦的</li></ul><p>##四. 建立TCP连接后发起http请求、<br>进过TCP3次握手之后，浏览器发起了http的请求，使用的http的方法 一般是GET 方法，请求的URL是 / ,协议是HTTP/1.0或HTTP/1.1</p><p>##五、 服务器处理 ——响应http请求，响应报文</p><ul><li><p>每台服务器上都会安装处理请求的应用——web server。常见的web server产品有apache、nginx、IIS或Lighttpd等。</p></li><li><p>当web server接收到一个HTTP请求，会返回一个HTTP响应，例如送回一个HTML页面。对于不同用户发送的请求，会结合配置文件，把不同请求委托给服务器上处理对应请求的程序进行处理</p></li><li><p>这些服务器端(server-side)的程序通常产生一个HTML的响应(response)来让浏览器可以浏览。</p></li><li><p>那么如何处理请求？实际上就是后台处理的工作。后台开发现在有很多框架，但大部分都还是按照MVC设计模式进行搭建的。<br>####MVC是三个单词的首字母缩写，它们是Model（模型）、View（视图）和Controller（控制器）。<br>1.最上面的一层，是直接面向最终用户的”视图层”（View）。视图是用户看到并与之交互的界面。这是前端工作的主力部分</p></li></ul><p>2.模型（Model），模型是将实际开发中的业务规则和所涉及的数据格式模型化，应用于模型的代码只需写一次就可以被多个视图重用。在MVC的三个部件中，模型拥有最多的处理任务。一个模型能为多个视图提供数据。</p><p>3.控制器接受用户的输入并调用模型和视图去完成用户的需求。Controller处于管理角色，从视图接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示模型处理返回的数据。</p><p>总结而言，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回html字符串给浏览器，浏览器呈现网页给用户。<br><img src="http://upload-images.jianshu.io/upload_images/10372596-d4623d70f3eb4af0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="22.png"></p><p>##七、浏览器处理——加载、解析、渲染<br>接下来就是浏览器进行处理， 通过后台处理返回的HTML字符串被浏览器接受后被一句句读取解析，html页面经历加载、解析、渲染。</p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>浏览器对一个html页面的加载顺序是从上而下的。如果加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><ul><li>解析文档是指将文档转化成为有意义的结构，也就是可让代码理解和使用的结构。解析得到的结果通常是代表了文档结构的节点树，它称作解析树或者语法树，也就是DOM树。如下图：</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/10372596-9cce5c3dcabd7371.gif?imageMogr2/auto-orient/strip" alt="23.gif"></p><ul><li>css解析是指将css文件解析为样式表对象。如下图：<br><img src="http://upload-images.jianshu.io/upload_images/10372596-193735f50fdc639e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="24.png"></li><li>js解析是文件在加载的同时也进行解析<br><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Parsing_general" target="_blank" rel="noopener">详细的解析过程请看这</a><br>###渲染<br>即为构建渲染树的过程，就是将DOM树进行可视化表示。构建这棵树是为了以正确的顺序绘制文档内容。<br>####八、绘制网页<br>浏览器根据 HTML 和 CSS 计算得到渲染树，最终绘制到屏幕上<br><img src="http://upload-images.jianshu.io/upload_images/10372596-f0c1b9416a7a3437.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="25.png"></li></ul><p>参看文章：<br><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">前端经典面试题: 从输入URL到页面加载发生了什么？</a><br> <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" title="链接到导航到URL时真正发生的事情" target="_blank" rel="noopener">导航到某个网址时会发生什么？</a><br> <a href="https://www.linux178.com/web/httprequest.html" target="_blank" rel="noopener">一次完整的HTTP事务是怎样一个过程？</a><br><a href="https://www.jianshu.com/p/fc957e25102e" target="_blank" rel="noopener">前端面试题：从url到页面展现，这之中发生了什么？</a><br><a href="https://www.zhihu.com/question/34873227" target="_blank" rel="noopener">在浏览器地址栏输入一个URL后回车，背后会进行哪些技术步骤？</a><br><a href="https://zhuanlan.zhihu.com/p/32298071" target="_blank" rel="noopener">从URL输入到页面展现发生了什么？</a><br><a href="https://zhuanlan.zhihu.com/p/32355135" target="_blank" rel="noopener">从URL输入到页面展现的过程-前端笔记</a><br><a href="https://www.jianshu.com/p/d616d887953a" target="_blank" rel="noopener">浏览器工作原理：从 URL 输入到页面展现到底发生了什么？</a><br><a href="http://blog.csdn.net/nawuyao/article/details/50386409" target="_blank" rel="noopener">MVC模型结构是什么</a><br><a href="https://www.jianshu.com/p/e141d1543143" target="_blank" rel="noopener">浏览器~加载，解析，渲染</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#前言&lt;br&gt;当用户打开浏览器，在地址栏输入 &lt;a href=&quot;https://www.baidu.com/，按下回车，页面展示百度首页。整个过程发生了什么呢？&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.baidu.com/，按
      
    
    </summary>
    
      <category term="client" scheme="https://pengxiaohui00.github.io/categories/client/"/>
    
    
      <category term="client" scheme="https://pengxiaohui00.github.io/tags/client/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="https://pengxiaohui00.github.io/2018/01/01/hexo/"/>
    <id>https://pengxiaohui00.github.io/2018/01/01/hexo/</id>
    <published>2018-01-01T07:25:31.000Z</published>
    <updated>2018-09-15T09:41:36.126Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="server" scheme="https://pengxiaohui00.github.io/categories/server/"/>
    
    
      <category term="server" scheme="https://pengxiaohui00.github.io/tags/server/"/>
    
  </entry>
  
</feed>
